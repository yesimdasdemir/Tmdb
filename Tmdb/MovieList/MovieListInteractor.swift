//
//  MovieListInteractor.swift
//  Tmdb
//
//  Created by Yeşim Daşdemir on 21.01.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MovieListBusinessLogic {
    func getMovieList()
}

protocol MovieListDataStore {
    var id: String? { get set }
}

final class MovieListInteractor: MovieListBusinessLogic, MovieListDataStore {
    var presenter: MovieListPresentationLogic?
    var worker: MovieListWorker?
    
    var response: GetMovieList.MovieList.Response?
    var id: String?
    
    func getMovieList() {
        
        worker = MovieListWorker()
        
        let request = GetMovieList.MovieList.Request(pageId: 1)
        
        let url = URL(string: "https://api.themoviedb.org/3/movie/popular?language=en-US&api_key=fd2b04342048fa2d5f728561866ad52a&page=1")
        
        let session = URLSession.shared
        
        if let url = url {
            let task = session.dataTask(with: url) { (data, response, error) in
                
                if error != nil {
                    let alert = UIAlertController(title: "Error", message: error?.localizedDescription, preferredStyle: .alert)
                    
                    let okButton = UIAlertAction(title: "OK", style: .default, handler: nil)
                    
                    alert.addAction(okButton)
                    
                } else {
                    
                    if let data = data {
                        
                        do {
                            let response = try JSONDecoder().decode(GetMovieList.MovieList.Response.self, from: data)
                            DispatchQueue.main.async { [weak self] in
                                debugPrint(response)
                                self?.response = response
                                self?.presenter?.presentMovieList(response: response)
                            }
                        } catch  {
                            print(error)
                        }
                    }
                }
            }
            task.resume()
        }
    }
}

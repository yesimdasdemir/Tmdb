//
//  MovieDetailViewController.swift
//  Tmdb
//
//  Created by Yeşim Daşdemir on 21.01.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MovieDetailFavoriteProtocol: AnyObject {
    func shouldRefresh()
}

protocol MovieDetailDisplayLogic: class {
    func displayMovieDetail(viewModel: SimpleDetailViewModel)
}

final class MovieDetailViewController: UIViewController, MovieDetailDisplayLogic {
    var interactor: MovieDetailBusinessLogic?
    var router: (NSObjectProtocol & MovieDetailRoutingLogic & MovieDetailDataPassing)?
    
    @IBOutlet private weak var tableView: UITableView!
    weak var favoriDelegate: MovieDetailFavoriteProtocol?
    
    private var favoriteArray: [Int] = []
    private var favoritebutton: UIButton = UIButton(type: .custom)
    private var selectedMovieId: Int {
        return (interactor?.getSelectedMovieId())!
    }
    
    var viewModel: SimpleDetailViewModel?
    let userDefaults = UserDefaults.standard
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = MovieDetailInteractor()
        let presenter = MovieDetailPresenter()
        let router = MovieDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        navigationItem.title = "MovieDetail"
        
        tableView.delegate = self
        tableView.dataSource = self
        addFavoriteButton()
        interactor?.getMovieDetail()
        registerTableViewCells()
    }
    
    func displayMovieDetail(viewModel: SimpleDetailViewModel) {
        self.viewModel = viewModel
        tableView.reloadData()
    }
    
    private func addFavoriteButton() {
        
        if let favArray: [Int] = userDefaults.array(forKey: "favoriteMoviesArray") as? [Int], favArray.contains(selectedMovieId) {
            favoritebutton.setImage(UIImage(named: "starFilled"), for: .normal)
        } else {
            favoritebutton.setImage(UIImage(named: "star"), for: .normal)
        }
        
        favoritebutton.addTarget(self, action: #selector(favoriteButtonClicked), for: .touchUpInside)
        
        let barButton = UIBarButtonItem(customView: favoritebutton)
        
        self.navigationItem.rightBarButtonItem = barButton
    }
    
    @objc
    private func favoriteButtonClicked() {
        
        favoritebutton.isSelected = !favoritebutton.isSelected
        
        let imageName: String = favoritebutton.isSelected ? "starFilled" : "star"
        favoritebutton.setImage(UIImage(named: imageName), for: .normal)
        
        if var favArray: [Int] = userDefaults.array(forKey: "favoriteMoviesArray") as? [Int] {
            
            if !favArray.contains(selectedMovieId) {
                favArray.append(selectedMovieId)
            } else {
                favArray.remove(at: favArray.firstIndex(of: selectedMovieId)!)
            }
            userDefaults.setValue(favArray, forKey: "favoriteMoviesArray")
        } else {
            favoriteArray.append(selectedMovieId)
            userDefaults.setValue(favoriteArray, forKey: "favoriteMoviesArray")
        }
        
        favoriDelegate?.shouldRefresh()
    }
    
    
    private func registerTableViewCells() {
        let cell = UINib(nibName: "SimpleDetailViewCell", bundle: nil)
        tableView.register(cell, forCellReuseIdentifier: "SimpleDetailViewCell")
    }
}

extension MovieDetailViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let cell = tableView.dequeueReusableCell(withIdentifier: "SimpleDetailViewCell") as? SimpleDetailViewCell {
            cell.frame = UIScreen.main.bounds
            cell.backgroundColor = .red
            cell.simpleDetailView.viewModel = viewModel
            return cell
        }
        return UITableViewCell()
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UIScreen.main.bounds.height
    }
}
